"use strict";
/*
* The MIT License (MIT)
*
* Copyright (c) 2003-2018 Aspose Pty Ltd
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Describes attachments.
 */
class AttachmentCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return AttachmentCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
AttachmentCollection.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "attachments",
        baseName: "attachments",
        type: "Array<Attachment>",
    }
];
exports.AttachmentCollection = AttachmentCollection;
/**
 * Describes attachment information
 */
class AttachmentInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return AttachmentInfo.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
AttachmentInfo.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "string",
    },
    {
        name: "extension",
        baseName: "extension",
        type: "string",
    },
    {
        name: "fileFormat",
        baseName: "fileFormat",
        type: "string",
    }
];
exports.AttachmentInfo = AttachmentInfo;
/**
 * The CAD documents rendering options. Rendering of CAD file formats is not supported at the moment.
 */
class CadOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return CadOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
CadOptions.attributeTypeMap = [
    {
        name: "scaleFactor",
        baseName: "scaleFactor",
        type: "number",
    },
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "renderLayouts",
        baseName: "renderLayouts",
        type: "boolean",
    },
    {
        name: "layoutName",
        baseName: "layoutName",
        type: "string",
    },
    {
        name: "layers",
        baseName: "layers",
        type: "Array<string>",
    },
    {
        name: "tiles",
        baseName: "tiles",
        type: "Array<Tile>",
    }
];
exports.CadOptions = CadOptions;
/**
 * The Spreadsheet documents rendering options.
 */
class CellsOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return CellsOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
CellsOptions.attributeTypeMap = [
    {
        name: "renderGridLines",
        baseName: "renderGridLines",
        type: "boolean",
    },
    {
        name: "paginateSheets",
        baseName: "paginateSheets",
        type: "boolean",
    },
    {
        name: "countRowsPerPage",
        baseName: "countRowsPerPage",
        type: "number",
    },
    {
        name: "ignoreEmptyRows",
        baseName: "ignoreEmptyRows",
        type: "boolean",
    },
    {
        name: "encoding",
        baseName: "encoding",
        type: "string",
    },
    {
        name: "internalHyperlinkPrefix",
        baseName: "internalHyperlinkPrefix",
        type: "string",
    },
    {
        name: "textOverflowMode",
        baseName: "textOverflowMode",
        type: "string",
    },
    {
        name: "renderHiddenRows",
        baseName: "renderHiddenRows",
        type: "boolean",
    },
    {
        name: "renderHiddenColumns",
        baseName: "renderHiddenColumns",
        type: "boolean",
    },
    {
        name: "renderPrintAreaOnly",
        baseName: "renderPrintAreaOnly",
        type: "boolean",
    }
];
exports.CellsOptions = CellsOptions;
/**
 * Describes document information.
 */
class DocumentInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DocumentInfo.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
DocumentInfo.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "extension",
        baseName: "extension",
        type: "string",
    },
    {
        name: "fileFormat",
        baseName: "fileFormat",
        type: "string",
    },
    {
        name: "size",
        baseName: "size",
        type: "number",
    },
    {
        name: "dateModified",
        baseName: "dateModified",
        type: "Date",
    },
    {
        name: "pages",
        baseName: "pages",
        type: "Array<PageInfo>",
    },
    {
        name: "attachments",
        baseName: "attachments",
        type: "Array<AttachmentInfo>",
    },
    {
        name: "layers",
        baseName: "layers",
        type: "Array<string>",
    },
    {
        name: "startDate",
        baseName: "startDate",
        type: "Date",
    },
    {
        name: "endDate",
        baseName: "endDate",
        type: "Date",
    }
];
exports.DocumentInfo = DocumentInfo;
/**
 * The Email documents rendering options.
 */
class EmailOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return EmailOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
EmailOptions.attributeTypeMap = [
    {
        name: "encoding",
        baseName: "encoding",
        type: "string",
    },
    {
        name: "pageSize",
        baseName: "pageSize",
        type: "string",
    },
    {
        name: "fieldLabels",
        baseName: "fieldLabels",
        type: "Array<FieldLabel>",
    }
];
exports.EmailOptions = EmailOptions;
/**
 * Represents field label
 */
class FieldLabel {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FieldLabel.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
FieldLabel.attributeTypeMap = [
    {
        name: "field",
        baseName: "field",
        type: "string",
    },
    {
        name: "label",
        baseName: "label",
        type: "string",
    }
];
exports.FieldLabel = FieldLabel;
/**
 * The empty type used as a flag.
 */
class FileResponse {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FileResponse.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
FileResponse.attributeTypeMap = [];
exports.FileResponse = FileResponse;
/**
 * Describes collection of font families.
 */
class FontCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FontCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
FontCollection.attributeTypeMap = [
    {
        name: "families",
        baseName: "families",
        type: "Array<FontFamily>",
    }
];
exports.FontCollection = FontCollection;
/**
 * Describes font family.
 */
class FontFamily {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FontFamily.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
FontFamily.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "string",
    }
];
exports.FontFamily = FontFamily;
/**
 * Format description.
 */
class Format {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return Format.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
Format.attributeTypeMap = [
    {
        name: "fileFormat",
        baseName: "fileFormat",
        type: "string",
    },
    {
        name: "extension",
        baseName: "extension",
        type: "string",
    }
];
exports.Format = Format;
/**
 * Describes object which contains list of supported file formats.
 */
class FormatCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FormatCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
FormatCollection.attributeTypeMap = [
    {
        name: "formats",
        baseName: "formats",
        type: "Array<Format>",
    }
];
exports.FormatCollection = FormatCollection;
/**
 * Describes attachment pages.
 */
class HtmlAttachmentPageCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return HtmlAttachmentPageCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
HtmlAttachmentPageCollection.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "attachmentName",
        baseName: "attachmentName",
        type: "string",
    },
    {
        name: "pages",
        baseName: "pages",
        type: "Array<HtmlPage>",
    }
];
exports.HtmlAttachmentPageCollection = HtmlAttachmentPageCollection;
/**
 * Describes collection of HTML pages.
 */
class HtmlPageCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return HtmlPageCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
HtmlPageCollection.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "pages",
        baseName: "pages",
        type: "Array<HtmlPage>",
    }
];
exports.HtmlPageCollection = HtmlPageCollection;
/**
 * Describes attachment pages.
 */
class ImageAttachmentPageCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ImageAttachmentPageCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
ImageAttachmentPageCollection.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "attachmentName",
        baseName: "attachmentName",
        type: "string",
    },
    {
        name: "pages",
        baseName: "pages",
        type: "Array<ImagePage>",
    }
];
exports.ImageAttachmentPageCollection = ImageAttachmentPageCollection;
/**
 * The Outlook data files rendering options.
 */
class OutlookOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return OutlookOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
OutlookOptions.attributeTypeMap = [
    {
        name: "maxItemsInFolder",
        baseName: "maxItemsInFolder",
        type: "number",
    }
];
exports.OutlookOptions = OutlookOptions;
/**
 * Page information.
 */
class PageInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PageInfo.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
PageInfo.attributeTypeMap = [
    {
        name: "number",
        baseName: "number",
        type: "number",
    },
    {
        name: "name",
        baseName: "name",
        type: "string",
    },
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    },
    {
        name: "angle",
        baseName: "angle",
        type: "number",
    },
    {
        name: "visible",
        baseName: "visible",
        type: "boolean",
    },
    {
        name: "rows",
        baseName: "rows",
        type: "Array<RowInfo>",
    }
];
exports.PageInfo = PageInfo;
/**
 * Describes pages information.
 */
class PageInfoCollection {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PageInfoCollection.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
PageInfoCollection.attributeTypeMap = [
    {
        name: "pages",
        baseName: "pages",
        type: "Array<PageInfo>",
    }
];
exports.PageInfoCollection = PageInfoCollection;
/**
 * The PDF documents rendering options.
 */
class PdfOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return PdfOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
PdfOptions.attributeTypeMap = [
    {
        name: "enablePreciseRendering",
        baseName: "enablePreciseRendering",
        type: "boolean",
    },
    {
        name: "enableInitialContentOrdering",
        baseName: "enableInitialContentOrdering",
        type: "boolean",
    },
    {
        name: "renderLayersSeparately",
        baseName: "renderLayersSeparately",
        type: "boolean",
    },
    {
        name: "imageQuality",
        baseName: "imageQuality",
        type: "string",
    }
];
exports.PdfOptions = PdfOptions;
/**
 * The Microsoft Project documents rendering options.
 */
class ProjectOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ProjectOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
ProjectOptions.attributeTypeMap = [
    {
        name: "pageSize",
        baseName: "pageSize",
        type: "string",
    },
    {
        name: "timeUnit",
        baseName: "timeUnit",
        type: "string",
    },
    {
        name: "startDate",
        baseName: "startDate",
        type: "Date",
    },
    {
        name: "endDate",
        baseName: "endDate",
        type: "Date",
    }
];
exports.ProjectOptions = ProjectOptions;
/**
 * Base render options.
 */
class RenderOptionsBase {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return RenderOptionsBase.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
RenderOptionsBase.attributeTypeMap = [
    {
        name: "password",
        baseName: "password",
        type: "string",
    },
    {
        name: "attachmentPassword",
        baseName: "attachmentPassword",
        type: "string",
    },
    {
        name: "extractText",
        baseName: "extractText",
        type: "boolean",
    },
    {
        name: "renderComments",
        baseName: "renderComments",
        type: "boolean",
    },
    {
        name: "renderHiddenPages",
        baseName: "renderHiddenPages",
        type: "boolean",
    },
    {
        name: "transforms",
        baseName: "transforms",
        type: "Array<string>",
    },
    {
        name: "defaultFontName",
        baseName: "defaultFontName",
        type: "string",
    },
    {
        name: "watermark",
        baseName: "watermark",
        type: "Watermark",
    },
    {
        name: "cellsOptions",
        baseName: "cellsOptions",
        type: "CellsOptions",
    },
    {
        name: "cadOptions",
        baseName: "cadOptions",
        type: "CadOptions",
    },
    {
        name: "emailOptions",
        baseName: "emailOptions",
        type: "EmailOptions",
    },
    {
        name: "wordsOptions",
        baseName: "wordsOptions",
        type: "WordsOptions",
    },
    {
        name: "pdfOptions",
        baseName: "pdfOptions",
        type: "PdfOptions",
    },
    {
        name: "slidesOptions",
        baseName: "slidesOptions",
        type: "SlidesOptions",
    },
    {
        name: "projectOptions",
        baseName: "projectOptions",
        type: "ProjectOptions",
    },
    {
        name: "outlookOptions",
        baseName: "outlookOptions",
        type: "OutlookOptions",
    }
];
exports.RenderOptionsBase = RenderOptionsBase;
/**
 * Reference to resource.
 */
class ResourceUrl {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ResourceUrl.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
ResourceUrl.attributeTypeMap = [
    {
        name: "url",
        baseName: "url",
        type: "string",
    }
];
exports.ResourceUrl = ResourceUrl;
/**
 * The page text row information.
 */
class RowInfo {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return RowInfo.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
RowInfo.attributeTypeMap = [
    {
        name: "text",
        baseName: "text",
        type: "string",
    },
    {
        name: "rowLeft",
        baseName: "rowLeft",
        type: "number",
    },
    {
        name: "rowTop",
        baseName: "rowTop",
        type: "number",
    },
    {
        name: "rowWidth",
        baseName: "rowWidth",
        type: "number",
    },
    {
        name: "rowHeight",
        baseName: "rowHeight",
        type: "number",
    },
    {
        name: "textCoordinates",
        baseName: "textCoordinates",
        type: "Array<number>",
    },
    {
        name: "characterCoordinates",
        baseName: "characterCoordinates",
        type: "Array<number>",
    }
];
exports.RowInfo = RowInfo;
/**
 * The Presentation documents rendering options.
 */
class SlidesOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SlidesOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
SlidesOptions.attributeTypeMap = [
    {
        name: "renderNotes",
        baseName: "renderNotes",
        type: "boolean",
    }
];
exports.SlidesOptions = SlidesOptions;
/**
 * The tile represents the region on the CAD drawing, that should be rendered.
 */
class Tile {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return Tile.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
Tile.attributeTypeMap = [
    {
        name: "startPointX",
        baseName: "startPointX",
        type: "number",
    },
    {
        name: "startPointY",
        baseName: "startPointY",
        type: "number",
    },
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    }
];
exports.Tile = Tile;
/**
 * Base transformation options.
 */
class TransformOptionsBase {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return TransformOptionsBase.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
TransformOptionsBase.attributeTypeMap = [
    {
        name: "pageNumber",
        baseName: "pageNumber",
        type: "number",
    },
    {
        name: "password",
        baseName: "password",
        type: "string",
    }
];
exports.TransformOptionsBase = TransformOptionsBase;
/**
 * Provides options to configure watermark appearance.
 */
class Watermark {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return Watermark.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
Watermark.attributeTypeMap = [
    {
        name: "text",
        baseName: "text",
        type: "string",
    },
    {
        name: "color",
        baseName: "color",
        type: "string",
    },
    {
        name: "position",
        baseName: "position",
        type: "string",
    },
    {
        name: "size",
        baseName: "size",
        type: "number",
    }
];
exports.Watermark = Watermark;
/**
 * The Text documents rendering options.
 */
class WordsOptions {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return WordsOptions.attributeTypeMap;
    }
}
/**
 * Attribute type map
 */
WordsOptions.attributeTypeMap = [
    {
        name: "encoding",
        baseName: "encoding",
        type: "string",
    },
    {
        name: "renderTrackedChanges",
        baseName: "renderTrackedChanges",
        type: "boolean",
    }
];
exports.WordsOptions = WordsOptions;
/**
 * Describes attachment.
 */
class Attachment extends ResourceUrl {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Attachment.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
Attachment.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "string",
    }
];
exports.Attachment = Attachment;
/**
 * Provides options for retrieving document information.
 */
class DocumentInfoOptions extends RenderOptionsBase {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentInfoOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
DocumentInfoOptions.attributeTypeMap = [];
exports.DocumentInfoOptions = DocumentInfoOptions;
/**
 * Describes HTML page.
 */
class HtmlPage extends ResourceUrl {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlPage.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
HtmlPage.attributeTypeMap = [
    {
        name: "number",
        baseName: "number",
        type: "number",
    },
    {
        name: "resources",
        baseName: "resources",
        type: "Array<Resource>",
    }
];
exports.HtmlPage = HtmlPage;
/**
 * Describes image page.
 */
class ImagePage extends ResourceUrl {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImagePage.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
ImagePage.attributeTypeMap = [
    {
        name: "number",
        baseName: "number",
        type: "number",
    }
];
exports.ImagePage = ImagePage;
/**
 * Describes image pages.
 */
class ImagePageCollection extends ResourceUrl {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImagePageCollection.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
ImagePageCollection.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "pages",
        baseName: "pages",
        type: "Array<ImagePage>",
    }
];
exports.ImagePageCollection = ImagePageCollection;
/**
 * Describes PDF file information.
 */
class PdfFileInfo extends ResourceUrl {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfFileInfo.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
PdfFileInfo.attributeTypeMap = [
    {
        name: "fileName",
        baseName: "fileName",
        type: "string",
    },
    {
        name: "folder",
        baseName: "folder",
        type: "string",
    },
    {
        name: "pdfFileName",
        baseName: "pdfFileName",
        type: "string",
    }
];
exports.PdfFileInfo = PdfFileInfo;
/**
 * Provides options for rendering document as PDF.
 */
class PdfFileOptions extends RenderOptionsBase {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfFileOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
PdfFileOptions.attributeTypeMap = [];
exports.PdfFileOptions = PdfFileOptions;
/**
 * Base render options.
 */
class RenderOptions extends RenderOptionsBase {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RenderOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
RenderOptions.attributeTypeMap = [
    {
        name: "startPageNumber",
        baseName: "startPageNumber",
        type: "number",
    },
    {
        name: "countPages",
        baseName: "countPages",
        type: "number",
    }
];
exports.RenderOptions = RenderOptions;
/**
 * Provides options for reordering document pages.
 */
class ReorderOptions extends TransformOptionsBase {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ReorderOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
ReorderOptions.attributeTypeMap = [
    {
        name: "newPosition",
        baseName: "newPosition",
        type: "number",
    }
];
exports.ReorderOptions = ReorderOptions;
/**
 * Describes resource.
 */
class Resource extends ResourceUrl {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Resource.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
Resource.attributeTypeMap = [
    {
        name: "name",
        baseName: "name",
        type: "string",
    }
];
exports.Resource = Resource;
/**
 * Provides options for rotating document pages.
 */
class RotateOptions extends TransformOptionsBase {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RotateOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
RotateOptions.attributeTypeMap = [
    {
        name: "angle",
        baseName: "angle",
        type: "number",
    }
];
exports.RotateOptions = RotateOptions;
/**
 * Provides options for rendering document pages as HTML.
 */
class HtmlOptions extends RenderOptions {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
HtmlOptions.attributeTypeMap = [
    {
        name: "resourcePath",
        baseName: "resourcePath",
        type: "string",
    },
    {
        name: "ignoreResourcePathInResources",
        baseName: "ignoreResourcePathInResources",
        type: "boolean",
    },
    {
        name: "embedResources",
        baseName: "embedResources",
        type: "boolean",
    },
    {
        name: "enableMinification",
        baseName: "enableMinification",
        type: "boolean",
    },
    {
        name: "enableResponsiveRendering",
        baseName: "enableResponsiveRendering",
        type: "boolean",
    },
    {
        name: "excludeFonts",
        baseName: "excludeFonts",
        type: "boolean",
    },
    {
        name: "excludeFontsList",
        baseName: "excludeFontsList",
        type: "Array<string>",
    }
];
exports.HtmlOptions = HtmlOptions;
/**
 * Provides options for rendering document as image.
 */
class ImageOptions extends RenderOptions {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImageOptions.attributeTypeMap);
    }
}
/**
 * Attribute type map
 */
ImageOptions.attributeTypeMap = [
    {
        name: "format",
        baseName: "format",
        type: "string",
    },
    {
        name: "quality",
        baseName: "quality",
        type: "number",
    },
    {
        name: "width",
        baseName: "width",
        type: "number",
    },
    {
        name: "height",
        baseName: "height",
        type: "number",
    }
];
exports.ImageOptions = ImageOptions;
const enumsMap = {};
exports.enumsMap = enumsMap;
const typeMap = {
    AttachmentCollection,
    AttachmentInfo,
    CadOptions,
    CellsOptions,
    DocumentInfo,
    EmailOptions,
    FieldLabel,
    FileResponse,
    FontCollection,
    FontFamily,
    Format,
    FormatCollection,
    HtmlAttachmentPageCollection,
    HtmlPageCollection,
    ImageAttachmentPageCollection,
    OutlookOptions,
    PageInfo,
    PageInfoCollection,
    PdfOptions,
    ProjectOptions,
    RenderOptionsBase,
    ResourceUrl,
    RowInfo,
    SlidesOptions,
    Tile,
    TransformOptionsBase,
    Watermark,
    WordsOptions,
    Attachment,
    DocumentInfoOptions,
    HtmlPage,
    ImagePage,
    ImagePageCollection,
    PdfFileInfo,
    PdfFileOptions,
    RenderOptions,
    ReorderOptions,
    Resource,
    RotateOptions,
    HtmlOptions,
    ImageOptions,
};
exports.typeMap = typeMap;
/**
 * Request model for HtmlCreateAttachmentPagesCache operation.
 */
class HtmlCreateAttachmentPagesCacheRequest {
    constructor(fileName, attachmentName, htmlOptions, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.htmlOptions = htmlOptions;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreateAttachmentPagesCacheRequest = HtmlCreateAttachmentPagesCacheRequest;
/**
 * Request model for HtmlCreatePagesCache operation.
 */
class HtmlCreatePagesCacheRequest {
    constructor(fileName, htmlOptions, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.htmlOptions = htmlOptions;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreatePagesCacheRequest = HtmlCreatePagesCacheRequest;
/**
 * Request model for HtmlCreatePagesCacheFromContent operation.
 */
class HtmlCreatePagesCacheFromContentRequest {
    constructor(file, htmlOptions, fileName, fontsFolder, folder, storage) {
        this.file = file;
        this.htmlOptions = htmlOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreatePagesCacheFromContentRequest = HtmlCreatePagesCacheFromContentRequest;
/**
 * Request model for HtmlCreatePagesCacheFromUrl operation.
 */
class HtmlCreatePagesCacheFromUrlRequest {
    constructor(url, htmlOptions, fileName, fontsFolder, folder, storage) {
        this.url = url;
        this.htmlOptions = htmlOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreatePagesCacheFromUrlRequest = HtmlCreatePagesCacheFromUrlRequest;
/**
 * Request model for HtmlCreatePdfFile operation.
 */
class HtmlCreatePdfFileRequest {
    constructor(fileName, pdfFileOptions, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.pdfFileOptions = pdfFileOptions;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreatePdfFileRequest = HtmlCreatePdfFileRequest;
/**
 * Request model for HtmlCreatePdfFileFromContent operation.
 */
class HtmlCreatePdfFileFromContentRequest {
    constructor(file, pdfFileOptions, fileName, fontsFolder, folder, storage) {
        this.file = file;
        this.pdfFileOptions = pdfFileOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreatePdfFileFromContentRequest = HtmlCreatePdfFileFromContentRequest;
/**
 * Request model for HtmlCreatePdfFileFromUrl operation.
 */
class HtmlCreatePdfFileFromUrlRequest {
    constructor(url, pdfFileOptions, fileName, fontsFolder, folder, storage) {
        this.url = url;
        this.pdfFileOptions = pdfFileOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlCreatePdfFileFromUrlRequest = HtmlCreatePdfFileFromUrlRequest;
/**
 * Request model for HtmlDeleteAttachmentPagesCache operation.
 */
class HtmlDeleteAttachmentPagesCacheRequest {
    constructor(fileName, attachmentName, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlDeleteAttachmentPagesCacheRequest = HtmlDeleteAttachmentPagesCacheRequest;
/**
 * Request model for HtmlDeletePagesCache operation.
 */
class HtmlDeletePagesCacheRequest {
    constructor(fileName, folder, storage) {
        this.fileName = fileName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlDeletePagesCacheRequest = HtmlDeletePagesCacheRequest;
/**
 * Request model for HtmlGetAttachment operation.
 */
class HtmlGetAttachmentRequest {
    constructor(fileName, attachmentName, password, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.password = password;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentRequest = HtmlGetAttachmentRequest;
/**
 * Request model for HtmlGetAttachmentInfo operation.
 */
class HtmlGetAttachmentInfoRequest {
    constructor(fileName, attachmentName, password, attachmentPassword, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentInfoRequest = HtmlGetAttachmentInfoRequest;
/**
 * Request model for HtmlGetAttachmentInfoWithOptions operation.
 */
class HtmlGetAttachmentInfoWithOptionsRequest {
    constructor(fileName, attachmentName, documentInfoOptions, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.documentInfoOptions = documentInfoOptions;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentInfoWithOptionsRequest = HtmlGetAttachmentInfoWithOptionsRequest;
/**
 * Request model for HtmlGetAttachmentPage operation.
 */
class HtmlGetAttachmentPageRequest {
    constructor(fileName, attachmentName, pageNumber, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, renderComments, renderHiddenPages, password, attachmentPassword, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.pageNumber = pageNumber;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentPageRequest = HtmlGetAttachmentPageRequest;
/**
 * Request model for HtmlGetAttachmentPageResource operation.
 */
class HtmlGetAttachmentPageResourceRequest {
    constructor(fileName, attachmentName, pageNumber, resourceName, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.pageNumber = pageNumber;
        this.resourceName = resourceName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentPageResourceRequest = HtmlGetAttachmentPageResourceRequest;
/**
 * Request model for HtmlGetAttachmentPages operation.
 */
class HtmlGetAttachmentPagesRequest {
    constructor(fileName, attachmentName, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, startPageNumber, countPages, renderComments, renderHiddenPages, password, attachmentPassword, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentPagesRequest = HtmlGetAttachmentPagesRequest;
/**
 * Request model for HtmlGetAttachments operation.
 */
class HtmlGetAttachmentsRequest {
    constructor(fileName, password, folder, storage) {
        this.fileName = fileName;
        this.password = password;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetAttachmentsRequest = HtmlGetAttachmentsRequest;
/**
 * Request model for HtmlGetDocumentInfo operation.
 */
class HtmlGetDocumentInfoRequest {
    constructor(fileName, password, renderComments, renderHiddenPages, folder, storage) {
        this.fileName = fileName;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetDocumentInfoRequest = HtmlGetDocumentInfoRequest;
/**
 * Request model for HtmlGetDocumentInfoFromContent operation.
 */
class HtmlGetDocumentInfoFromContentRequest {
    constructor(file, documentInfoOptions, fileName, folder, storage) {
        this.file = file;
        this.documentInfoOptions = documentInfoOptions;
        this.fileName = fileName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetDocumentInfoFromContentRequest = HtmlGetDocumentInfoFromContentRequest;
/**
 * Request model for HtmlGetDocumentInfoFromUrl operation.
 */
class HtmlGetDocumentInfoFromUrlRequest {
    constructor(url, fileName, password, renderComments, renderHiddenPages, folder, storage) {
        this.url = url;
        this.fileName = fileName;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetDocumentInfoFromUrlRequest = HtmlGetDocumentInfoFromUrlRequest;
/**
 * Request model for HtmlGetDocumentInfoFromUrlWithOptions operation.
 */
class HtmlGetDocumentInfoFromUrlWithOptionsRequest {
    constructor(url, documentInfoOptions, fileName, folder, storage) {
        this.url = url;
        this.documentInfoOptions = documentInfoOptions;
        this.fileName = fileName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetDocumentInfoFromUrlWithOptionsRequest = HtmlGetDocumentInfoFromUrlWithOptionsRequest;
/**
 * Request model for HtmlGetDocumentInfoWithOptions operation.
 */
class HtmlGetDocumentInfoWithOptionsRequest {
    constructor(fileName, documentInfoOptions, folder, storage) {
        this.fileName = fileName;
        this.documentInfoOptions = documentInfoOptions;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetDocumentInfoWithOptionsRequest = HtmlGetDocumentInfoWithOptionsRequest;
/**
 * Request model for HtmlGetPage operation.
 */
class HtmlGetPageRequest {
    constructor(fileName, pageNumber, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, password, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.pageNumber = pageNumber;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetPageRequest = HtmlGetPageRequest;
/**
 * Request model for HtmlGetPageResource operation.
 */
class HtmlGetPageResourceRequest {
    constructor(fileName, pageNumber, resourceName, folder, storage) {
        this.fileName = fileName;
        this.pageNumber = pageNumber;
        this.resourceName = resourceName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetPageResourceRequest = HtmlGetPageResourceRequest;
/**
 * Request model for HtmlGetPages operation.
 */
class HtmlGetPagesRequest {
    constructor(fileName, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, startPageNumber, countPages, password, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetPagesRequest = HtmlGetPagesRequest;
/**
 * Request model for HtmlGetPagesFromUrl operation.
 */
class HtmlGetPagesFromUrlRequest {
    constructor(url, fileName, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, startPageNumber, countPages, password, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.url = url;
        this.fileName = fileName;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetPagesFromUrlRequest = HtmlGetPagesFromUrlRequest;
/**
 * Request model for HtmlGetPdfFile operation.
 */
class HtmlGetPdfFileRequest {
    constructor(fileName, renderComments, renderHiddenPages, password, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetPdfFileRequest = HtmlGetPdfFileRequest;
/**
 * Request model for HtmlGetPdfFileFromUrl operation.
 */
class HtmlGetPdfFileFromUrlRequest {
    constructor(url, fileName, password, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.url = url;
        this.fileName = fileName;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetPdfFileFromUrlRequest = HtmlGetPdfFileFromUrlRequest;
/**
 * Request model for HtmlGetZipWithAttachmentPages operation.
 */
class HtmlGetZipWithAttachmentPagesRequest {
    constructor(fileName, attachmentName, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, startPageNumber, countPages, renderComments, renderHiddenPages, password, attachmentPassword, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetZipWithAttachmentPagesRequest = HtmlGetZipWithAttachmentPagesRequest;
/**
 * Request model for HtmlGetZipWithPages operation.
 */
class HtmlGetZipWithPagesRequest {
    constructor(fileName, resourcePath, ignoreResourcePathInResources, embedResources, enableMinification, enableResponsiveRendering, excludeFonts, startPageNumber, countPages, password, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.resourcePath = resourcePath;
        this.ignoreResourcePathInResources = ignoreResourcePathInResources;
        this.embedResources = embedResources;
        this.enableMinification = enableMinification;
        this.enableResponsiveRendering = enableResponsiveRendering;
        this.excludeFonts = excludeFonts;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlGetZipWithPagesRequest = HtmlGetZipWithPagesRequest;
/**
 * Request model for HtmlTransformPages operation.
 */
class HtmlTransformPagesRequest {
    constructor(fileName, transformOptions, folder, storage) {
        this.fileName = fileName;
        this.transformOptions = transformOptions;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.HtmlTransformPagesRequest = HtmlTransformPagesRequest;
/**
 * Request model for ImageCreateAttachmentPagesCache operation.
 */
class ImageCreateAttachmentPagesCacheRequest {
    constructor(fileName, attachmentName, imageOptions, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.imageOptions = imageOptions;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreateAttachmentPagesCacheRequest = ImageCreateAttachmentPagesCacheRequest;
/**
 * Request model for ImageCreatePagesCache operation.
 */
class ImageCreatePagesCacheRequest {
    constructor(fileName, imageOptions, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.imageOptions = imageOptions;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreatePagesCacheRequest = ImageCreatePagesCacheRequest;
/**
 * Request model for ImageCreatePagesCacheFromContent operation.
 */
class ImageCreatePagesCacheFromContentRequest {
    constructor(file, imageOptions, fileName, fontsFolder, folder, storage) {
        this.file = file;
        this.imageOptions = imageOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreatePagesCacheFromContentRequest = ImageCreatePagesCacheFromContentRequest;
/**
 * Request model for ImageCreatePagesCacheFromUrl operation.
 */
class ImageCreatePagesCacheFromUrlRequest {
    constructor(url, imageOptions, fileName, fontsFolder, folder, storage) {
        this.url = url;
        this.imageOptions = imageOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreatePagesCacheFromUrlRequest = ImageCreatePagesCacheFromUrlRequest;
/**
 * Request model for ImageCreatePdfFile operation.
 */
class ImageCreatePdfFileRequest {
    constructor(fileName, pdfFileOptions, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.pdfFileOptions = pdfFileOptions;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreatePdfFileRequest = ImageCreatePdfFileRequest;
/**
 * Request model for ImageCreatePdfFileFromContent operation.
 */
class ImageCreatePdfFileFromContentRequest {
    constructor(file, pdfFileOptions, fileName, fontsFolder, folder, storage) {
        this.file = file;
        this.pdfFileOptions = pdfFileOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreatePdfFileFromContentRequest = ImageCreatePdfFileFromContentRequest;
/**
 * Request model for ImageCreatePdfFileFromUrl operation.
 */
class ImageCreatePdfFileFromUrlRequest {
    constructor(url, pdfFileOptions, fileName, fontsFolder, folder, storage) {
        this.url = url;
        this.pdfFileOptions = pdfFileOptions;
        this.fileName = fileName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageCreatePdfFileFromUrlRequest = ImageCreatePdfFileFromUrlRequest;
/**
 * Request model for ImageDeleteAttachmentPagesCache operation.
 */
class ImageDeleteAttachmentPagesCacheRequest {
    constructor(fileName, attachmentName, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageDeleteAttachmentPagesCacheRequest = ImageDeleteAttachmentPagesCacheRequest;
/**
 * Request model for ImageDeletePagesCache operation.
 */
class ImageDeletePagesCacheRequest {
    constructor(fileName, folder, storage) {
        this.fileName = fileName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageDeletePagesCacheRequest = ImageDeletePagesCacheRequest;
/**
 * Request model for ImageGetAttachment operation.
 */
class ImageGetAttachmentRequest {
    constructor(fileName, attachmentName, password, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.password = password;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetAttachmentRequest = ImageGetAttachmentRequest;
/**
 * Request model for ImageGetAttachmentInfo operation.
 */
class ImageGetAttachmentInfoRequest {
    constructor(fileName, attachmentName, extractText, password, attachmentPassword, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.extractText = extractText;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetAttachmentInfoRequest = ImageGetAttachmentInfoRequest;
/**
 * Request model for ImageGetAttachmentInfoWithOptions operation.
 */
class ImageGetAttachmentInfoWithOptionsRequest {
    constructor(fileName, attachmentName, documentInfoOptions, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.documentInfoOptions = documentInfoOptions;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetAttachmentInfoWithOptionsRequest = ImageGetAttachmentInfoWithOptionsRequest;
/**
 * Request model for ImageGetAttachmentPage operation.
 */
class ImageGetAttachmentPageRequest {
    constructor(fileName, attachmentName, pageNumber, format, width, height, quality, password, attachmentPassword, extractText, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.pageNumber = pageNumber;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetAttachmentPageRequest = ImageGetAttachmentPageRequest;
/**
 * Request model for ImageGetAttachmentPages operation.
 */
class ImageGetAttachmentPagesRequest {
    constructor(fileName, attachmentName, format, width, height, quality, startPageNumber, countPages, renderComments, renderHiddenPages, password, attachmentPassword, extractText, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.extractText = extractText;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetAttachmentPagesRequest = ImageGetAttachmentPagesRequest;
/**
 * Request model for ImageGetAttachments operation.
 */
class ImageGetAttachmentsRequest {
    constructor(fileName, password, folder, storage) {
        this.fileName = fileName;
        this.password = password;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetAttachmentsRequest = ImageGetAttachmentsRequest;
/**
 * Request model for ImageGetDocumentInfo operation.
 */
class ImageGetDocumentInfoRequest {
    constructor(fileName, password, extractText, renderComments, renderHiddenPages, folder, storage) {
        this.fileName = fileName;
        this.password = password;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetDocumentInfoRequest = ImageGetDocumentInfoRequest;
/**
 * Request model for ImageGetDocumentInfoFromContent operation.
 */
class ImageGetDocumentInfoFromContentRequest {
    constructor(file, documentInfoOptions, fileName, folder, storage) {
        this.file = file;
        this.documentInfoOptions = documentInfoOptions;
        this.fileName = fileName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetDocumentInfoFromContentRequest = ImageGetDocumentInfoFromContentRequest;
/**
 * Request model for ImageGetDocumentInfoFromUrl operation.
 */
class ImageGetDocumentInfoFromUrlRequest {
    constructor(url, fileName, password, extractText, renderComments, renderHiddenPages, folder, storage) {
        this.url = url;
        this.fileName = fileName;
        this.password = password;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetDocumentInfoFromUrlRequest = ImageGetDocumentInfoFromUrlRequest;
/**
 * Request model for ImageGetDocumentInfoFromUrlWithOptions operation.
 */
class ImageGetDocumentInfoFromUrlWithOptionsRequest {
    constructor(url, documentInfoOptions, fileName, folder, storage) {
        this.url = url;
        this.documentInfoOptions = documentInfoOptions;
        this.fileName = fileName;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetDocumentInfoFromUrlWithOptionsRequest = ImageGetDocumentInfoFromUrlWithOptionsRequest;
/**
 * Request model for ImageGetDocumentInfoWithOptions operation.
 */
class ImageGetDocumentInfoWithOptionsRequest {
    constructor(fileName, documentInfoOptions, folder, storage) {
        this.fileName = fileName;
        this.documentInfoOptions = documentInfoOptions;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetDocumentInfoWithOptionsRequest = ImageGetDocumentInfoWithOptionsRequest;
/**
 * Request model for ImageGetPage operation.
 */
class ImageGetPageRequest {
    constructor(fileName, pageNumber, format, width, height, quality, password, extractText, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.pageNumber = pageNumber;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.password = password;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetPageRequest = ImageGetPageRequest;
/**
 * Request model for ImageGetPages operation.
 */
class ImageGetPagesRequest {
    constructor(fileName, format, width, height, quality, startPageNumber, countPages, password, extractText, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.password = password;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetPagesRequest = ImageGetPagesRequest;
/**
 * Request model for ImageGetPagesFromUrl operation.
 */
class ImageGetPagesFromUrlRequest {
    constructor(url, fileName, format, width, height, quality, startPageNumber, countPages, password, extractText, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.url = url;
        this.fileName = fileName;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.password = password;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetPagesFromUrlRequest = ImageGetPagesFromUrlRequest;
/**
 * Request model for ImageGetPdfFile operation.
 */
class ImageGetPdfFileRequest {
    constructor(fileName, renderComments, renderHiddenPages, password, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetPdfFileRequest = ImageGetPdfFileRequest;
/**
 * Request model for ImageGetPdfFileFromUrl operation.
 */
class ImageGetPdfFileFromUrlRequest {
    constructor(url, fileName, password, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.url = url;
        this.fileName = fileName;
        this.password = password;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetPdfFileFromUrlRequest = ImageGetPdfFileFromUrlRequest;
/**
 * Request model for ImageGetZipWithAttachmentPages operation.
 */
class ImageGetZipWithAttachmentPagesRequest {
    constructor(fileName, attachmentName, format, width, height, quality, startPageNumber, countPages, renderComments, renderHiddenPages, password, attachmentPassword, extractText, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.attachmentName = attachmentName;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.password = password;
        this.attachmentPassword = attachmentPassword;
        this.extractText = extractText;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetZipWithAttachmentPagesRequest = ImageGetZipWithAttachmentPagesRequest;
/**
 * Request model for ImageGetZipWithPages operation.
 */
class ImageGetZipWithPagesRequest {
    constructor(fileName, format, width, height, quality, startPageNumber, countPages, password, extractText, renderComments, renderHiddenPages, defaultFontName, fontsFolder, folder, storage) {
        this.fileName = fileName;
        this.format = format;
        this.width = width;
        this.height = height;
        this.quality = quality;
        this.startPageNumber = startPageNumber;
        this.countPages = countPages;
        this.password = password;
        this.extractText = extractText;
        this.renderComments = renderComments;
        this.renderHiddenPages = renderHiddenPages;
        this.defaultFontName = defaultFontName;
        this.fontsFolder = fontsFolder;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageGetZipWithPagesRequest = ImageGetZipWithPagesRequest;
/**
 * Request model for ImageTransformPages operation.
 */
class ImageTransformPagesRequest {
    constructor(fileName, transformOptions, folder, storage) {
        this.fileName = fileName;
        this.transformOptions = transformOptions;
        this.folder = folder;
        this.storage = storage;
    }
}
exports.ImageTransformPagesRequest = ImageTransformPagesRequest;
