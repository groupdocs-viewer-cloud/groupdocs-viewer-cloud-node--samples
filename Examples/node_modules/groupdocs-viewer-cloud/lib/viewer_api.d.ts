/// <reference types="node" />
import http = require("http");
import { Configuration } from "./configuration";
import * as model from "./model";
export * from "./model";
export * from "./configuration";
/**
 * GroupDocs.Viewer Cloud API
 */
export declare class ViewerApi {
    /**
     * Creates new instance of ViewerApi
     * @param appSid Application identifier (App SID).
     * @param appKey Application private key (App Key).
     */
    static fromKeys(appSid: string, appKey: string): ViewerApi;
    /**
     * Creates new instance of ViewerApi
     * @param config API configuration.
     */
    static fromConfig(config: Configuration): ViewerApi;
    /**
     * Configuration
     */
    private configuration;
    /**
     * @param config Configuration.
     */
    private constructor();
    /**
     * Removes fonts cache.
     * @param requestObj contains request parameters
     */
    deleteFontsCache(): Promise<http.ClientResponse>;
    /**
     * List installed fonts.
     * @param requestObj contains request parameters
     */
    getFonts(): Promise<model.FontCollection>;
    /**
     * Retrieves list of supported file formats.
     * @param requestObj contains request parameters
     */
    getSupportedFileFormats(): Promise<model.FormatCollection>;
    /**
     * Creates attachment cache.
     * @param requestObj contains request parameters
     */
    htmlCreateAttachmentPagesCache(requestObj: model.HtmlCreateAttachmentPagesCacheRequest): Promise<model.HtmlAttachmentPageCollection>;
    /**
     * Creates document pages as HTML and saves them in cache. Pages created before will be removed from cache.
     * @param requestObj contains request parameters
     */
    htmlCreatePagesCache(requestObj: model.HtmlCreatePagesCacheRequest): Promise<model.HtmlPageCollection>;
    /**
     * Creates posted document pages as HTML and saves them in cache. Content with document or multipart content is expected where first part is document and second is HtmlOptions. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    htmlCreatePagesCacheFromContent(requestObj: model.HtmlCreatePagesCacheFromContentRequest): Promise<model.HtmlPageCollection>;
    /**
     * Creates pages as HTML and saves them in cache for document at provided URL. Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    htmlCreatePagesCacheFromUrl(requestObj: model.HtmlCreatePagesCacheFromUrlRequest): Promise<model.HtmlPageCollection>;
    /**
     * Creates PDF document.  Removes PDF document if it was created before.
     * @param requestObj contains request parameters
     */
    htmlCreatePdfFile(requestObj: model.HtmlCreatePdfFileRequest): Promise<model.PdfFileInfo>;
    /**
     * Creates PDF document from document passed in request body and saves it in cache. Content with document or multipart content is expected where first part is document and second is PdfFileOptions. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    htmlCreatePdfFileFromContent(requestObj: model.HtmlCreatePdfFileFromContentRequest): Promise<model.PdfFileInfo>;
    /**
     * Creates PDF document for document at provided URL and saves it in cache.  Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file. Expects PdfFileOptions object data in request body.
     * @param requestObj contains request parameters
     */
    htmlCreatePdfFileFromUrl(requestObj: model.HtmlCreatePdfFileFromUrlRequest): Promise<model.PdfFileInfo>;
    /**
     * Removes attachment cache.
     * @param requestObj contains request parameters
     */
    htmlDeleteAttachmentPagesCache(requestObj: model.HtmlDeleteAttachmentPagesCacheRequest): Promise<http.ClientResponse>;
    /**
     * Removes document cache.
     * @param requestObj contains request parameters
     */
    htmlDeletePagesCache(requestObj: model.HtmlDeletePagesCacheRequest): Promise<http.ClientResponse>;
    /**
     * Downloads attachment.
     * @param requestObj contains request parameters
     */
    htmlGetAttachment(requestObj: model.HtmlGetAttachmentRequest): Promise<Buffer>;
    /**
     * Retrieves attachment information.
     * @param requestObj contains request parameters
     */
    htmlGetAttachmentInfo(requestObj: model.HtmlGetAttachmentInfoRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves attachment information with specified DocumentInfoOptions. Expects DocumentInfoOptions object data in request body.
     * @param requestObj contains request parameters
     */
    htmlGetAttachmentInfoWithOptions(requestObj: model.HtmlGetAttachmentInfoWithOptionsRequest): Promise<model.DocumentInfo>;
    /**
     * Downloads attachment page as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetAttachmentPage(requestObj: model.HtmlGetAttachmentPageRequest): Promise<Buffer>;
    /**
     * Downloads HTML page resource (image, style, graphics or font).
     * @param requestObj contains request parameters
     */
    htmlGetAttachmentPageResource(requestObj: model.HtmlGetAttachmentPageResourceRequest): Promise<Buffer>;
    /**
     * Retrieves attachment pages as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetAttachmentPages(requestObj: model.HtmlGetAttachmentPagesRequest): Promise<model.HtmlAttachmentPageCollection>;
    /**
     * Retrieves list of document attachments.
     * @param requestObj contains request parameters
     */
    htmlGetAttachments(requestObj: model.HtmlGetAttachmentsRequest): Promise<model.AttachmentCollection>;
    /**
     * Retrieves document information.
     * @param requestObj contains request parameters
     */
    htmlGetDocumentInfo(requestObj: model.HtmlGetDocumentInfoRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information for posted document. Content with document or multipart content is expected where first part is document and second is DocumentInfoOptions. Saves file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    htmlGetDocumentInfoFromContent(requestObj: model.HtmlGetDocumentInfoFromContentRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information for document at provided URL. Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    htmlGetDocumentInfoFromUrl(requestObj: model.HtmlGetDocumentInfoFromUrlRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information for document at provided URL. Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    htmlGetDocumentInfoFromUrlWithOptions(requestObj: model.HtmlGetDocumentInfoFromUrlWithOptionsRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information with specified DocumentInfoOptions. Expects DocumentInfoOptions object data in request body.
     * @param requestObj contains request parameters
     */
    htmlGetDocumentInfoWithOptions(requestObj: model.HtmlGetDocumentInfoWithOptionsRequest): Promise<model.DocumentInfo>;
    /**
     * Downloads document page as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetPage(requestObj: model.HtmlGetPageRequest): Promise<Buffer>;
    /**
     * Downloads HTML page resource (image, style, graphics or font).
     * @param requestObj contains request parameters
     */
    htmlGetPageResource(requestObj: model.HtmlGetPageResourceRequest): Promise<Buffer>;
    /**
     * Retrieves list of document pages as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetPages(requestObj: model.HtmlGetPagesRequest): Promise<model.HtmlPageCollection>;
    /**
     * Retrieves list of document pages as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetPagesFromUrl(requestObj: model.HtmlGetPagesFromUrlRequest): Promise<model.HtmlPageCollection>;
    /**
     * Downloads document as PDF.
     * @param requestObj contains request parameters
     */
    htmlGetPdfFile(requestObj: model.HtmlGetPdfFileRequest): Promise<Buffer>;
    /**
     * Downloads document at provided URL as PDF.  Document will be retrieved from the passed URL and added to Storage.
     * @param requestObj contains request parameters
     */
    htmlGetPdfFileFromUrl(requestObj: model.HtmlGetPdfFileFromUrlRequest): Promise<Buffer>;
    /**
     * Retrieves attachment pages as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetZipWithAttachmentPages(requestObj: model.HtmlGetZipWithAttachmentPagesRequest): Promise<Buffer>;
    /**
     * Retrieves list of document pages as HTML.
     * @param requestObj contains request parameters
     */
    htmlGetZipWithPages(requestObj: model.HtmlGetZipWithPagesRequest): Promise<Buffer>;
    /**
     * Rotates or reorders document page(s).
     * @param requestObj contains request parameters
     */
    htmlTransformPages(requestObj: model.HtmlTransformPagesRequest): Promise<model.PageInfoCollection>;
    /**
     * Creates attachment cache.
     * @param requestObj contains request parameters
     */
    imageCreateAttachmentPagesCache(requestObj: model.ImageCreateAttachmentPagesCacheRequest): Promise<model.ImageAttachmentPageCollection>;
    /**
     * Creates document pages as image and saves them in cache.  Pages created before will be removed from cache.
     * @param requestObj contains request parameters
     */
    imageCreatePagesCache(requestObj: model.ImageCreatePagesCacheRequest): Promise<model.ImagePageCollection>;
    /**
     * Creates posted document pages as image and saves them in cache. Content with document or multipart content is expected where first part is document and second is HtmlOptions. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    imageCreatePagesCacheFromContent(requestObj: model.ImageCreatePagesCacheFromContentRequest): Promise<model.ImagePageCollection>;
    /**
     * Creates pages as image and saves them in cache for document at provided URL. Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    imageCreatePagesCacheFromUrl(requestObj: model.ImageCreatePagesCacheFromUrlRequest): Promise<model.ImagePageCollection>;
    /**
     * Creates PDF document.  Removes PDF document if it was created before.
     * @param requestObj contains request parameters
     */
    imageCreatePdfFile(requestObj: model.ImageCreatePdfFileRequest): Promise<model.PdfFileInfo>;
    /**
     * Creates PDF document from document passed in request body and saves it in cache. Content with document or multipart content is expected where first part is document and second is PdfFileOptions. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    imageCreatePdfFileFromContent(requestObj: model.ImageCreatePdfFileFromContentRequest): Promise<model.PdfFileInfo>;
    /**
     * Creates PDF document for document at provided URL and saves it in cache.  Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file. Expects PdfFileOptions object data in request body.
     * @param requestObj contains request parameters
     */
    imageCreatePdfFileFromUrl(requestObj: model.ImageCreatePdfFileFromUrlRequest): Promise<model.PdfFileInfo>;
    /**
     * Removes attachment cache.
     * @param requestObj contains request parameters
     */
    imageDeleteAttachmentPagesCache(requestObj: model.ImageDeleteAttachmentPagesCacheRequest): Promise<http.ClientResponse>;
    /**
     * Removes document cache.
     * @param requestObj contains request parameters
     */
    imageDeletePagesCache(requestObj: model.ImageDeletePagesCacheRequest): Promise<http.ClientResponse>;
    /**
     * Downloads attachment.
     * @param requestObj contains request parameters
     */
    imageGetAttachment(requestObj: model.ImageGetAttachmentRequest): Promise<Buffer>;
    /**
     * Retrieves attachment information.
     * @param requestObj contains request parameters
     */
    imageGetAttachmentInfo(requestObj: model.ImageGetAttachmentInfoRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves attachment information with specified DocumentInfoOptions. Expects DocumentInfoOptions object data in request body.
     * @param requestObj contains request parameters
     */
    imageGetAttachmentInfoWithOptions(requestObj: model.ImageGetAttachmentInfoWithOptionsRequest): Promise<model.DocumentInfo>;
    /**
     * Downloads attachment page as image.
     * @param requestObj contains request parameters
     */
    imageGetAttachmentPage(requestObj: model.ImageGetAttachmentPageRequest): Promise<Buffer>;
    /**
     * Retrieves attachment pages as images.
     * @param requestObj contains request parameters
     */
    imageGetAttachmentPages(requestObj: model.ImageGetAttachmentPagesRequest): Promise<model.ImageAttachmentPageCollection>;
    /**
     * Retrieves list of document attachments.
     * @param requestObj contains request parameters
     */
    imageGetAttachments(requestObj: model.ImageGetAttachmentsRequest): Promise<model.AttachmentCollection>;
    /**
     * Retrieves document information.
     * @param requestObj contains request parameters
     */
    imageGetDocumentInfo(requestObj: model.ImageGetDocumentInfoRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information for posted document. Content with document or multipart content is expected where first part is document and second is DocumentInfoOptions. Saves file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    imageGetDocumentInfoFromContent(requestObj: model.ImageGetDocumentInfoFromContentRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information for document at provided URL. Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    imageGetDocumentInfoFromUrl(requestObj: model.ImageGetDocumentInfoFromUrlRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information for document at provided URL. Retrieves file from specified URL and tries to detect file type when fileName parameter is not specified. Saves retrieved file in storage. Use fileName and folder parameters to specify desired file name and folder to save file. When file with specified name already exists in storage new unique file name will be used for file.
     * @param requestObj contains request parameters
     */
    imageGetDocumentInfoFromUrlWithOptions(requestObj: model.ImageGetDocumentInfoFromUrlWithOptionsRequest): Promise<model.DocumentInfo>;
    /**
     * Retrieves document information with specified options. Expects DocumentInfoOptions object data in request body.
     * @param requestObj contains request parameters
     */
    imageGetDocumentInfoWithOptions(requestObj: model.ImageGetDocumentInfoWithOptionsRequest): Promise<model.DocumentInfo>;
    /**
     * Downloads document page as image.
     * @param requestObj contains request parameters
     */
    imageGetPage(requestObj: model.ImageGetPageRequest): Promise<Buffer>;
    /**
     * Retrieves list of document pages as image.
     * @param requestObj contains request parameters
     */
    imageGetPages(requestObj: model.ImageGetPagesRequest): Promise<model.ImagePageCollection>;
    /**
     * Retrieves list of document pages as image.
     * @param requestObj contains request parameters
     */
    imageGetPagesFromUrl(requestObj: model.ImageGetPagesFromUrlRequest): Promise<model.ImagePageCollection>;
    /**
     * Downloads document as PDF.
     * @param requestObj contains request parameters
     */
    imageGetPdfFile(requestObj: model.ImageGetPdfFileRequest): Promise<Buffer>;
    /**
     * Downloads document at provided URL as PDF.  Document will be retrieved from the passed URL and added to Storage.
     * @param requestObj contains request parameters
     */
    imageGetPdfFileFromUrl(requestObj: model.ImageGetPdfFileFromUrlRequest): Promise<Buffer>;
    /**
     * Retrieves attachment pages as images.
     * @param requestObj contains request parameters
     */
    imageGetZipWithAttachmentPages(requestObj: model.ImageGetZipWithAttachmentPagesRequest): Promise<Buffer>;
    /**
     * Retrieves list of document pages as image.
     * @param requestObj contains request parameters
     */
    imageGetZipWithPages(requestObj: model.ImageGetZipWithPagesRequest): Promise<Buffer>;
    /**
     * Rotates or reorders document page(s).
     * @param requestObj contains request parameters
     */
    imageTransformPages(requestObj: model.ImageTransformPagesRequest): Promise<model.PageInfoCollection>;
}
