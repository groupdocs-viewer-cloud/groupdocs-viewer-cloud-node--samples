/// <reference types="node" />
/**
 * Describes attachments.
 */
export declare class AttachmentCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File name.
     */
    fileName: string;
    /**
     * File folder.
     */
    folder: string;
    /**
     * Attachments list.
     */
    attachments: Array<Attachment>;
    constructor(init?: Partial<AttachmentCollection>);
}
/**
 * Describes attachment information
 */
export declare class AttachmentInfo {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Attachment name.
     */
    name: string;
    /**
     * Attachment extension.
     */
    extension: string;
    /**
     * File format.
     */
    fileFormat: string;
    constructor(init?: Partial<AttachmentInfo>);
}
/**
 * The CAD documents rendering options. Rendering of CAD file formats is not supported at the moment.
 */
export declare class CadOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The scale factor affects the size of an output document.
     */
    scaleFactor: number;
    /**
     * The width of the render result in pixels.
     */
    width: number;
    /**
     * The height of the render result in pixels.
     */
    height: number;
    /**
     * Indicates whether layouts from CAD document should be rendered.
     */
    renderLayouts: boolean;
    /**
     * The name of the specific layout to render.
     */
    layoutName: string;
    /**
     * The list of document layers to render. By default all layers will be rendered. Layer names are case sensitive.
     */
    layers: Array<string>;
    /**
     * The coordinates of the drawing regions, that should be rendered. Please note, that this option works only for DWG format. When the list is empty, then whole drawing is rendered. When the list contains at least one tile, then ScaleFactor, Width, Height, RenderLayouts and LayoutName properties are ignored.
     */
    tiles: Array<Tile>;
    constructor(init?: Partial<CadOptions>);
}
/**
 * The Spreadsheet documents rendering options.
 */
export declare class CellsOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Indicates whether to render grid lines.
     */
    renderGridLines: boolean;
    /**
     * Allows to enable worksheets pagination. By default one worksheet is rendered into one page.
     */
    paginateSheets: boolean;
    /**
     * The number of rows rendered into one page when PaginateSheets = true. Default value is 50.
     */
    countRowsPerPage: number;
    /**
     * Indicates whether empty rows should be ignored.
     */
    ignoreEmptyRows: boolean;
    /**
     * The text (*.csv) document encoding.
     */
    encoding: string;
    /**
     * Prefix for hyper-link that references worksheet inside the same document. For rendering document as HTML only.
     */
    internalHyperlinkPrefix: string;
    /**
     * Text overflow mode applied when the text is too big to fit into the cell. Supported values {Overlay|OverlayIfNextIsEmpty|HideText|AutoFitColumn}: 1. Overlay - overlay next cells even they are not empty. 2. OverlayIfNextIsEmpty - overlay next cells only if they are not empty (default). 3. HideText - hide overflow text. 4. AutoFitColumn - expand cell width to fit overflowed text.
     */
    textOverflowMode: string;
    /**
     * Enables rendering of hidden rows.
     */
    renderHiddenRows: boolean;
    /**
     * Enables rendering of hidden columns.
     */
    renderHiddenColumns: boolean;
    /**
     * Enables rendering worksheet(s) sections which is defined as print area. Renders each print area in a worksheet as a separate page.
     */
    renderPrintAreaOnly: boolean;
    constructor(init?: Partial<CellsOptions>);
}
/**
 * Describes document information.
 */
export declare class DocumentInfo {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File name.
     */
    fileName: string;
    /**
     * Extension
     */
    extension: string;
    /**
     * File format.
     */
    fileFormat: string;
    /**
     * Size in bytes.
     */
    size: number;
    /**
     * Modification date.
     */
    dateModified: Date;
    /**
     * Pages information.
     */
    pages: Array<PageInfo>;
    /**
     * List of attachments.
     */
    attachments: Array<AttachmentInfo>;
    /**
     * The list of layers contained in a CAD document.
     */
    layers: Array<string>;
    /**
     * For MS Project documents, The date time from which the project started.
     */
    startDate: Date;
    /**
     * For MS Project documents, the date time when the project is to be completed.
     */
    endDate: Date;
    constructor(init?: Partial<DocumentInfo>);
}
/**
 * The Email documents rendering options.
 */
export declare class EmailOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The document encoding e.g. \"utf-8\".
     */
    encoding: string;
    /**
     * The size of the output page when rendering as PDF or image. Supported values {Unknown|Letter|Ledger|A0|A1|A2|A3}: 1. Unknown - the default, unspecified page size. 2. Letter - the size of the Letter page in points is 792x612. 3. Ledger - the size of the Letter page in points is 1224x792. 4. A0 - the size of the A0 page in points is 3371x2384. 5. A1 - the size of the A1 page in points is 2384x1685. 6. A2 - the size of the A2 page in points is 1684x1190. 7. A3 - the size of the A3 page in points is 1190x842. 8. A4 - the size of the A4 page in points is 842x595.
     */
    pageSize: string;
    /**
     * The list of supported email message field labels: 1. Field: \"Anniversary\" - default value is \"Anniversary\". 2. Field: \"Attachments\" - default value is \"Attachments\". 3. Field: \"Bcc\" - default value is \"Bcc\". 4. Field: \"Birthday\" - default value is \"Birthday\". 5. Field: \"Business\" - default value is \"Business\". 6. Field: \"BusinessAddress\" - default value is \"Business Address\". 7. Field: \"BusinessFax\" - default value is \"Business Fax\". 8. Field: \"BusinessHomepage\" - default value is \"BusinessHomePage\". 9. Field: \"Cc\" - default value is \"Cc\". 10. Field: \"Company\" - default value is \"Company\". 11. Field: \"Department\" - default value is \"Department\". 12. Field: \"Email\" - default value is \"Email\". 13. Field: \"EmailDisplayAs\" - default value is \"Email Display As\". 14. Field: \"Email2\" - default value is \"Email2\". 15. Field: \"Email2DisplayAs\" - default value is \"Email2 Display As\". 16. Field: \"Email3\" - default value is \"Email3\". 17. Field: \"Email3DisplayAs\" - default value is \"Email3 Display As\". 18. Field: \"End\" - default value is \"End\". 19. Field: \"FirstName\" - default value is \"First Name\". 20. Field: \"From\" - default value is \"From\". 21. Field: \"FullName\" - default value is \"Full Name\". 22. Field: \"Gender\" - default value is \"Gender\". 23. Field: \"Hobbies\" - default value is \"Hobbies\". 24. Field: \"Home\" - default value is \"Home\". 25. Field: \"HomeAddress\" - default value is \"Home Address\". 26. Field: \"Importance\" - default value is \"Importance\". 27. Field: \"JobTitle\" - default value is \"Job Title\". 28. Field: \"LastName\" - default value is \"Last Name\". 29. Field: \"Location\" - default value is \"Location\". 30. Field: \"MiddleName\" - default value is \"Middle Name\". 31. Field: \"Mobile\" - default value is \"Mobile\". 32. Field: \"Organizer\" - default value is \"Organizer\". 33. Field: \"OtherAddress\" - default value is \"Other Address\". 34. Field: \"PersonalHomepage\" - default value is \"PersonalHomePage\". 35. Field: \"Profession\" - default value is \"Profession\". 36. Field: \"Recurrence\" - default value is \"Recurrence\". 37. Field: \"RecurrencePattern\" - default value is \"Recurrence Pattern\". 38. Field: \"RequiredAttendees\" - default value is \"Required Attendees\". 39. Field: \"Sent\" - default value is \"Sent\". 40. Field: \"ShowTimeAs\" - default value is \"Show Time As\". 41. Field: \"SpousePartner\" - default value is \"Spouse/Partner\". 42. Field: \"Start\" - default value is \"Start\". 43. Field: \"Subject\" - default value is \"Subject\". 44. Field: \"To\" - default value is \"To\". 45. Field: \"UserField1\" - default value is \"User Field 1\". 46. Field: \"UserField2\" - default value is \"User Field 2\". 47. Field: \"UserField3\" - default value is \"User Field 3\". 48. Field: \"UserField4\" - default value is \"User Field 4\".
     */
    fieldLabels: Array<FieldLabel>;
    constructor(init?: Partial<EmailOptions>);
}
/**
 * Represents field label
 */
export declare class FieldLabel {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The field name e.g. \"From\"
     */
    field: string;
    /**
     * The label e.g. \"Sender\"
     */
    label: string;
    constructor(init?: Partial<FieldLabel>);
}
/**
 * The empty type used as a flag.
 */
export declare class FileResponse {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    constructor(init?: Partial<FileResponse>);
}
/**
 * Describes collection of font families.
 */
export declare class FontCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Font families.
     */
    families: Array<FontFamily>;
    constructor(init?: Partial<FontCollection>);
}
/**
 * Describes font family.
 */
export declare class FontFamily {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Font family name.
     */
    name: string;
    constructor(init?: Partial<FontFamily>);
}
/**
 * Format description.
 */
export declare class Format {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File format.
     */
    fileFormat: string;
    /**
     * File extension.
     */
    extension: string;
    constructor(init?: Partial<Format>);
}
/**
 * Describes object which contains list of supported file formats.
 */
export declare class FormatCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Supported file formats.
     */
    formats: Array<Format>;
    constructor(init?: Partial<FormatCollection>);
}
/**
 * Describes attachment pages.
 */
export declare class HtmlAttachmentPageCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The file name.
     */
    fileName: string;
    /**
     * File folder.
     */
    folder: string;
    /**
     * Attachment name.
     */
    attachmentName: string;
    /**
     * Pages list.
     */
    pages: Array<HtmlPage>;
    constructor(init?: Partial<HtmlAttachmentPageCollection>);
}
/**
 * Describes collection of HTML pages.
 */
export declare class HtmlPageCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The name of the file.
     */
    fileName: string;
    /**
     * The file folder.
     */
    folder: string;
    /**
     * Pages list.
     */
    pages: Array<HtmlPage>;
    constructor(init?: Partial<HtmlPageCollection>);
}
/**
 * Describes attachment pages.
 */
export declare class ImageAttachmentPageCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File name.
     */
    fileName: string;
    /**
     * File folder.
     */
    folder: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * Pages list.
     */
    pages: Array<ImagePage>;
    constructor(init?: Partial<ImageAttachmentPageCollection>);
}
/**
 * The Outlook data files rendering options.
 */
export declare class OutlookOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The limit of items to render in mailbox folders
     */
    maxItemsInFolder: number;
    constructor(init?: Partial<OutlookOptions>);
}
/**
 * Page information.
 */
export declare class PageInfo {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Page number.
     */
    number: number;
    /**
     * Page name.
     */
    name: string;
    /**
     * Page width.
     */
    width: number;
    /**
     * Page height.
     */
    height: number;
    /**
     * Page angle.
     */
    angle: number;
    /**
     * Page visibility.
     */
    visible: boolean;
    /**
     * Page rows.
     */
    rows: Array<RowInfo>;
    constructor(init?: Partial<PageInfo>);
}
/**
 * Describes pages information.
 */
export declare class PageInfoCollection {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Pages list.
     */
    pages: Array<PageInfo>;
    constructor(init?: Partial<PageInfoCollection>);
}
/**
 * The PDF documents rendering options.
 */
export declare class PdfOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Indicates whether the PDF document is rendered in a precise mode or not. It is recommended to enable this option when rendering documents with complex content e.g. documents which contains hieroglyphs or any kind o glyphs which should be rendered separately from each other.
     */
    enablePreciseRendering: boolean;
    /**
     * When this option is enabled content (graphics and text) will be added to HTML document accordingly Z-order in original PDF document. When this option is disabled content (graphics and text) will be added to a single layer.
     */
    enableInitialContentOrdering: boolean;
    /**
     * When this option is enabled layers will be separated from each other in the HTML document.
     */
    renderLayersSeparately: boolean;
    /**
     * Specifies output image quality for image resources when rendering as HTML. The default value is Low. Supported values {Low|Medium|High}: 1. Low - satisfying image quality and smallest image size. 2. Medium - better image quality and larger image size. 3. High - best image quality with largest image size.
     */
    imageQuality: string;
    constructor(init?: Partial<PdfOptions>);
}
/**
 * The Microsoft Project documents rendering options.
 */
export declare class ProjectOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The size of the page. Supported values {Unknown|Letter|Ledger|A0|A1|A2|A3}: 1. Unknown - the default, unspecified page size. 2. Letter - the size of the Letter page in points is 792x612. 3. Ledger - the size of the Letter page in points is 1224x792. 4. A0 - the size of the A0 page in points is 3371x2384. 5. A1 - the size of the A1 page in points is 2384x1685. 6. A2 - the size of the A2 page in points is 1684x1190. 7. A3 - the size of the A3 page in points is 1190x842. 8. A4 - the size of the A4 page in points is 842x595.
     */
    pageSize: string;
    /**
     * The time unit to use as minimal point. Supported values {Unknown|Days|ThirdsOfMonths|Months}: 1. Unknown - unknown, unspecified time scale. 2. Days - one day interval. 3. ThirdsOfMonths - one third of the month. 4. Months - one month interval.
     */
    timeUnit: string;
    /**
     * The start date of a Gantt Chart View to render.
     */
    startDate: Date;
    /**
     * The end date of a Gantt Chart View to render.
     */
    endDate: Date;
    constructor(init?: Partial<ProjectOptions>);
}
/**
 * Base render options.
 */
export declare class RenderOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Allows to specify document password in case when document is password-protected.
     */
    password: string;
    /**
     * Allows to specify attachment password in case when attachment is password-protected.
     */
    attachmentPassword: string;
    /**
     * Enables document text extraction. For rendering document as image only.
     */
    extractText: boolean;
    /**
     * Enables document comments rendering.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * Transforms to apply. Available transforms [\"Rotate\",\"Reorder\",\"AddPrintAction\"]. 1. Rotate - pages will be rotated on angle if angle was set before. 2. Reorder - for rendering document as PDF only. Pages will be ordered according to rearrangements made before. 3. AddPrintAction - for rendering document as PDF only. An JavaScript action will be added which opens print dialog when PDF document is opened.
     */
    transforms: Array<string>;
    /**
     * The name of the default font. Default font name may be specified in following cases: - You want to generally specify the default font to fall back on, if particular font   in the document cannot be found during rendering. - Your document uses fonts, that contain non-English characters and you want to make sure   any missing font is replaced with one that has the same character set available.
     */
    defaultFontName: string;
    /**
     * Allows to specify watermark.
     */
    watermark: Watermark;
    /**
     * The Spreadsheet documents rendering options.
     */
    cellsOptions: CellsOptions;
    /**
     * The CAD documents rendering options.
     */
    cadOptions: CadOptions;
    /**
     * The Email documents rendering options.
     */
    emailOptions: EmailOptions;
    /**
     * The Text documents rendering options.
     */
    wordsOptions: WordsOptions;
    /**
     * The PDF documents rendering options.
     */
    pdfOptions: PdfOptions;
    /**
     * The Presentation documents rendering options.
     */
    slidesOptions: SlidesOptions;
    /**
     * The Microsoft Project documents rendering options.
     */
    projectOptions: ProjectOptions;
    /**
     * The Outlook Data File document (PST/OST) rendering options.
     */
    outlookOptions: OutlookOptions;
    constructor(init?: Partial<RenderOptionsBase>);
}
/**
 * Reference to resource.
 */
export declare class ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * ULR to retrieve resource.
     */
    url: string;
    constructor(init?: Partial<ResourceUrl>);
}
/**
 * The page text row information.
 */
export declare class RowInfo {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Row text.
     */
    text: string;
    /**
     * Row left coordinate.
     */
    rowLeft: number;
    /**
     * Row top coordinate.
     */
    rowTop: number;
    /**
     * Row width.
     */
    rowWidth: number;
    /**
     * Row height.
     */
    rowHeight: number;
    /**
     * Text coordinates.
     */
    textCoordinates: Array<number>;
    /**
     * Characters coordinates.
     */
    characterCoordinates: Array<number>;
    constructor(init?: Partial<RowInfo>);
}
/**
 * The Presentation documents rendering options.
 */
export declare class SlidesOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Indicates whether slide notes should be rendered.
     */
    renderNotes: boolean;
    constructor(init?: Partial<SlidesOptions>);
}
/**
 * The tile represents the region on the CAD drawing, that should be rendered.
 */
export declare class Tile {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The X coordinate of the lowest left point on the drawing where the tile begins.
     */
    startPointX: number;
    /**
     * The Y coordinate of the lowest left point on the drawing where the tile begins.
     */
    startPointY: number;
    /**
     * The width of the tile.
     */
    width: number;
    /**
     * The height of the tile.
     */
    height: number;
    constructor(init?: Partial<Tile>);
}
/**
 * Base transformation options.
 */
export declare class TransformOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The page number to transform.
     */
    pageNumber: number;
    /**
     * Allows to specify document password in case when document is password-protected.
     */
    password: string;
    constructor(init?: Partial<TransformOptionsBase>);
}
/**
 * Provides options to configure watermark appearance.
 */
export declare class Watermark {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The watermark text.
     */
    text: string;
    /**
     * The watermark color. Supported formats {Magenta|(112,222,11)|(50,112,222,11)}. Default value is \"Red\".
     */
    color: string;
    /**
     * The watermark position. Supported positions {Diagonal|TopLeft|TopCenter|TopRight|BottomLeft|BottomCenter|BottomRight}. Default value is \"Diagonal\".
     */
    position: string;
    /**
     * Watermark size in percents. Default value is 100.
     */
    size: number;
    constructor(init?: Partial<Watermark>);
}
/**
 * The Text documents rendering options.
 */
export declare class WordsOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The document encoding e.g. \"utf-8\".
     */
    encoding: string;
    /**
     * Indicates whether Tracked Changes (Revisions) should be rendered or not.
     */
    renderTrackedChanges: boolean;
    constructor(init?: Partial<WordsOptions>);
}
/**
 * Describes attachment.
 */
export declare class Attachment extends ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Attachment name.
     */
    name: string;
    constructor(init?: Partial<Attachment>);
}
/**
 * Provides options for retrieving document information.
 */
export declare class DocumentInfoOptions extends RenderOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    constructor(init?: Partial<DocumentInfoOptions>);
}
/**
 * Describes HTML page.
 */
export declare class HtmlPage extends ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Page number.
     */
    number: number;
    /**
     * HTML resources.
     */
    resources: Array<Resource>;
    constructor(init?: Partial<HtmlPage>);
}
/**
 * Describes image page.
 */
export declare class ImagePage extends ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Page number.
     */
    number: number;
    constructor(init?: Partial<ImagePage>);
}
/**
 * Describes image pages.
 */
export declare class ImagePageCollection extends ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File name.
     */
    fileName: string;
    /**
     * File folder.
     */
    folder: string;
    /**
     * Images list.
     */
    pages: Array<ImagePage>;
    constructor(init?: Partial<ImagePageCollection>);
}
/**
 * Describes PDF file information.
 */
export declare class PdfFileInfo extends ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * File name.
     */
    fileName: string;
    /**
     * File folder.
     */
    folder: string;
    /**
     * PDF file name.
     */
    pdfFileName: string;
    constructor(init?: Partial<PdfFileInfo>);
}
/**
 * Provides options for rendering document as PDF.
 */
export declare class PdfFileOptions extends RenderOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    constructor(init?: Partial<PdfFileOptions>);
}
/**
 * Base render options.
 */
export declare class RenderOptions extends RenderOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Allows to specify document page number as starting page to render.
     */
    startPageNumber: number;
    /**
     * Allows to specify count of document pages to render.
     */
    countPages: number;
    constructor(init?: Partial<RenderOptions>);
}
/**
 * Provides options for reordering document pages.
 */
export declare class ReorderOptions extends TransformOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The position where page should be placed.
     */
    newPosition: number;
    constructor(init?: Partial<ReorderOptions>);
}
/**
 * Describes resource.
 */
export declare class Resource extends ResourceUrl {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * HTML resource (image, style, graphics or font) file name.
     */
    name: string;
    constructor(init?: Partial<Resource>);
}
/**
 * Provides options for rotating document pages.
 */
export declare class RotateOptions extends TransformOptionsBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * The angle in degrees to which the page should be rotated.
     */
    angle: number;
    constructor(init?: Partial<RotateOptions>);
}
/**
 * Provides options for rendering document pages as HTML.
 */
export declare class HtmlOptions extends RenderOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Allows to specify HTML resources (styles, images and fonts) path. For example when resource path is http://example.com/api/pages/{page-number}/resources/{resource-name} the {page-number} and {resource-name} templates will be replaced with page number and resource name accordingly. Ignored when EmbedResources option is set to true.
     */
    resourcePath: string;
    /**
     * Allows to ignore ResourcePath when processing *.css files.  When this options is enabled ResourcePath won't be added to resource references in *.css file.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Controls output HTML document resources (styles, images and fonts) saving. When this options set to true all resources will be embedded into HTML document and ResourcePath option value will be ignored.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The list of font names, that will be excluded from HTML.
     */
    excludeFontsList: Array<string>;
    constructor(init?: Partial<HtmlOptions>);
}
/**
 * Provides options for rendering document as image.
 */
export declare class ImageOptions extends RenderOptions {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
    /**
     * Allows to set image format (png, jpg, bmp). Default value is png.
     */
    format: string;
    /**
     * Allows to specify quality when rendering as JPG. Valid values are between 1 and 100.  Default value is 90.
     */
    quality: number;
    /**
     * Allows to specify output image width.  Specify image width in case when you want to change output image dimensions. When Width has value and Height value is 0 then Height value will be calculated  to save image proportions.
     */
    width: number;
    /**
     * Allows to specify output image height.  Specify image height in case when you want to change output image dimensions. When Height has value and Width value is 0 then Width value will be calculated  to save image proportions.
     */
    height: number;
    constructor(init?: Partial<ImageOptions>);
}
declare const enumsMap: {};
declare const typeMap: {
    AttachmentCollection: typeof AttachmentCollection;
    AttachmentInfo: typeof AttachmentInfo;
    CadOptions: typeof CadOptions;
    CellsOptions: typeof CellsOptions;
    DocumentInfo: typeof DocumentInfo;
    EmailOptions: typeof EmailOptions;
    FieldLabel: typeof FieldLabel;
    FileResponse: typeof FileResponse;
    FontCollection: typeof FontCollection;
    FontFamily: typeof FontFamily;
    Format: typeof Format;
    FormatCollection: typeof FormatCollection;
    HtmlAttachmentPageCollection: typeof HtmlAttachmentPageCollection;
    HtmlPageCollection: typeof HtmlPageCollection;
    ImageAttachmentPageCollection: typeof ImageAttachmentPageCollection;
    OutlookOptions: typeof OutlookOptions;
    PageInfo: typeof PageInfo;
    PageInfoCollection: typeof PageInfoCollection;
    PdfOptions: typeof PdfOptions;
    ProjectOptions: typeof ProjectOptions;
    RenderOptionsBase: typeof RenderOptionsBase;
    ResourceUrl: typeof ResourceUrl;
    RowInfo: typeof RowInfo;
    SlidesOptions: typeof SlidesOptions;
    Tile: typeof Tile;
    TransformOptionsBase: typeof TransformOptionsBase;
    Watermark: typeof Watermark;
    WordsOptions: typeof WordsOptions;
    Attachment: typeof Attachment;
    DocumentInfoOptions: typeof DocumentInfoOptions;
    HtmlPage: typeof HtmlPage;
    ImagePage: typeof ImagePage;
    ImagePageCollection: typeof ImagePageCollection;
    PdfFileInfo: typeof PdfFileInfo;
    PdfFileOptions: typeof PdfFileOptions;
    RenderOptions: typeof RenderOptions;
    ReorderOptions: typeof ReorderOptions;
    Resource: typeof Resource;
    RotateOptions: typeof RotateOptions;
    HtmlOptions: typeof HtmlOptions;
    ImageOptions: typeof ImageOptions;
};
export { enumsMap, typeMap };
/**
 * Request model for HtmlCreateAttachmentPagesCache operation.
 */
export declare class HtmlCreateAttachmentPagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The HTML rendering options.
     */
    htmlOptions: HtmlOptions;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, htmlOptions?: HtmlOptions, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlCreatePagesCache operation.
 */
export declare class HtmlCreatePagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The HTML rendering options.
     */
    htmlOptions: HtmlOptions;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, htmlOptions?: HtmlOptions, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlCreatePagesCacheFromContent operation.
 */
export declare class HtmlCreatePagesCacheFromContentRequest {
    /**
     * File contents.
     */
    file: Buffer;
    /**
     * HTML rendering options 'HtmlOptions' as JSON or XML.
     */
    htmlOptions: Buffer;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(file: Buffer, htmlOptions: Buffer, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlCreatePagesCacheFromUrl operation.
 */
export declare class HtmlCreatePagesCacheFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The HTML rendering options.
     */
    htmlOptions: HtmlOptions;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, htmlOptions?: HtmlOptions, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlCreatePdfFile operation.
 */
export declare class HtmlCreatePdfFileRequest {
    /**
     * The document name.
     */
    fileName: string;
    /**
     * The PDF file rendering options.
     */
    pdfFileOptions: PdfFileOptions;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, pdfFileOptions?: PdfFileOptions, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlCreatePdfFileFromContent operation.
 */
export declare class HtmlCreatePdfFileFromContentRequest {
    /**
     * File contents.
     */
    file: Buffer;
    /**
     * PDF rendering options 'PdfFileOptions' as JSON or XML.
     */
    pdfFileOptions: Buffer;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(file: Buffer, pdfFileOptions: Buffer, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlCreatePdfFileFromUrl operation.
 */
export declare class HtmlCreatePdfFileFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The PDF file rendering.
     */
    pdfFileOptions: PdfFileOptions;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, pdfFileOptions?: PdfFileOptions, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlDeleteAttachmentPagesCache operation.
 */
export declare class HtmlDeleteAttachmentPagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlDeletePagesCache operation.
 */
export declare class HtmlDeletePagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachment operation.
 */
export declare class HtmlGetAttachmentRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, password?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachmentInfo operation.
 */
export declare class HtmlGetAttachmentInfoRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, password?: string, attachmentPassword?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachmentInfoWithOptions operation.
 */
export declare class HtmlGetAttachmentInfoWithOptionsRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The rendering options.
     */
    documentInfoOptions: DocumentInfoOptions;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, documentInfoOptions?: DocumentInfoOptions, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachmentPage operation.
 */
export declare class HtmlGetAttachmentPageRequest {
    /**
     * The document name.
     */
    fileName: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * The attachment page number.
     */
    pageNumber: number;
    /**
     * The attachment page HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, pageNumber: number, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, attachmentPassword?: string, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachmentPageResource operation.
 */
export declare class HtmlGetAttachmentPageResourceRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The page number.
     */
    pageNumber: number;
    /**
     * Name of the resource.
     */
    resourceName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, pageNumber: number, resourceName: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachmentPages operation.
 */
export declare class HtmlGetAttachmentPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The attachment page HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, startPageNumber?: number, countPages?: number, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, attachmentPassword?: string, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetAttachments operation.
 */
export declare class HtmlGetAttachmentsRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, password?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetDocumentInfo operation.
 */
export declare class HtmlGetDocumentInfoRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetDocumentInfoFromContent operation.
 */
export declare class HtmlGetDocumentInfoFromContentRequest {
    /**
     * File contents.
     */
    file: Buffer;
    /**
     * Document info options 'DocumentInfoOptions' as JSON or XML.
     */
    documentInfoOptions: Buffer;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(file: Buffer, documentInfoOptions: Buffer, fileName?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetDocumentInfoFromUrl operation.
 */
export declare class HtmlGetDocumentInfoFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, fileName?: string, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetDocumentInfoFromUrlWithOptions operation.
 */
export declare class HtmlGetDocumentInfoFromUrlWithOptionsRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The rendering options.
     */
    documentInfoOptions: DocumentInfoOptions;
    /**
     * The document name.
     */
    fileName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, documentInfoOptions?: DocumentInfoOptions, fileName?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetDocumentInfoWithOptions operation.
 */
export declare class HtmlGetDocumentInfoWithOptionsRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The rendering options.
     */
    documentInfoOptions: DocumentInfoOptions;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, documentInfoOptions?: DocumentInfoOptions, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetPage operation.
 */
export declare class HtmlGetPageRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The page number.
     */
    pageNumber: number;
    /**
     * The HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, pageNumber: number, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetPageResource operation.
 */
export declare class HtmlGetPageResourceRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The page number.
     */
    pageNumber: number;
    /**
     * Name of the resource.
     */
    resourceName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, pageNumber: number, resourceName: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetPages operation.
 */
export declare class HtmlGetPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, startPageNumber?: number, countPages?: number, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetPagesFromUrl operation.
 */
export declare class HtmlGetPagesFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, fileName?: string, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, startPageNumber?: number, countPages?: number, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetPdfFile operation.
 */
export declare class HtmlGetPdfFileRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password. Not required if PDF document was created before.
     */
    password: string;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetPdfFileFromUrl operation.
 */
export declare class HtmlGetPdfFileFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password. Not required if PDF document was created before.
     */
    password: string;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, fileName?: string, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetZipWithAttachmentPages operation.
 */
export declare class HtmlGetZipWithAttachmentPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The attachment page HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, startPageNumber?: number, countPages?: number, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, attachmentPassword?: string, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlGetZipWithPages operation.
 */
export declare class HtmlGetZipWithPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The HTML resource path.
     */
    resourcePath: string;
    /**
     * When this option enabled ResourcePath won't be added to resource reference in *.css and *.svg files.
     */
    ignoreResourcePathInResources: boolean;
    /**
     * Whether to embed HTML resources or save them separate.
     */
    embedResources: boolean;
    /**
     * Enables content (HTML, CSS and SVG) minification.
     */
    enableMinification: boolean;
    /**
     * Indicates whether rendering will provide responsive web pages, that look well on different device types.
     */
    enableResponsiveRendering: boolean;
    /**
     * Prevents adding fonts to the output HTML document.
     */
    excludeFonts: boolean;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, resourcePath?: string, ignoreResourcePathInResources?: boolean, embedResources?: boolean, enableMinification?: boolean, enableResponsiveRendering?: boolean, excludeFonts?: boolean, startPageNumber?: number, countPages?: number, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for HtmlTransformPages operation.
 */
export declare class HtmlTransformPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The transformation options.
     */
    transformOptions: TransformOptionsBase;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, transformOptions?: TransformOptionsBase, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreateAttachmentPagesCache operation.
 */
export declare class ImageCreateAttachmentPagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The image rendering options.
     */
    imageOptions: ImageOptions;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, imageOptions?: ImageOptions, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreatePagesCache operation.
 */
export declare class ImageCreatePagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The image render options.
     */
    imageOptions: ImageOptions;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, imageOptions?: ImageOptions, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreatePagesCacheFromContent operation.
 */
export declare class ImageCreatePagesCacheFromContentRequest {
    /**
     * File contents.
     */
    file: Buffer;
    /**
     * Image rendering options 'ImageOptions' as JSON or XML.
     */
    imageOptions: Buffer;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(file: Buffer, imageOptions: Buffer, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreatePagesCacheFromUrl operation.
 */
export declare class ImageCreatePagesCacheFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The image rendering options.
     */
    imageOptions: ImageOptions;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, imageOptions?: ImageOptions, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreatePdfFile operation.
 */
export declare class ImageCreatePdfFileRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The PDF file rendering options.
     */
    pdfFileOptions: PdfFileOptions;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, pdfFileOptions?: PdfFileOptions, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreatePdfFileFromContent operation.
 */
export declare class ImageCreatePdfFileFromContentRequest {
    /**
     * File contents.
     */
    file: Buffer;
    /**
     * PDF rendering options 'PdfFileOptions' as JSON or XML.
     */
    pdfFileOptions: Buffer;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(file: Buffer, pdfFileOptions: Buffer, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageCreatePdfFileFromUrl operation.
 */
export declare class ImageCreatePdfFileFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The PDF file rendering options.
     */
    pdfFileOptions: PdfFileOptions;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, pdfFileOptions?: PdfFileOptions, fileName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageDeleteAttachmentPagesCache operation.
 */
export declare class ImageDeleteAttachmentPagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageDeletePagesCache operation.
 */
export declare class ImageDeletePagesCacheRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetAttachment operation.
 */
export declare class ImageGetAttachmentRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, password?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetAttachmentInfo operation.
 */
export declare class ImageGetAttachmentInfoRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, extractText?: boolean, password?: string, attachmentPassword?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetAttachmentInfoWithOptions operation.
 */
export declare class ImageGetAttachmentInfoWithOptionsRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The rendering options.
     */
    documentInfoOptions: DocumentInfoOptions;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, documentInfoOptions?: DocumentInfoOptions, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetAttachmentPage operation.
 */
export declare class ImageGetAttachmentPageRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Name of the attachment.
     */
    attachmentName: string;
    /**
     * The attachment page number.
     */
    pageNumber: number;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality for jpg format. Default value is 90.
     */
    quality: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, pageNumber: number, format?: string, width?: number, height?: number, quality?: number, password?: string, attachmentPassword?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetAttachmentPages operation.
 */
export declare class ImageGetAttachmentPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality for jpg format. Default value is 90.
     */
    quality: number;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, format?: string, width?: number, height?: number, quality?: number, startPageNumber?: number, countPages?: number, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, attachmentPassword?: string, extractText?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetAttachments operation.
 */
export declare class ImageGetAttachmentsRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, password?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetDocumentInfo operation.
 */
export declare class ImageGetDocumentInfoRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, password?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetDocumentInfoFromContent operation.
 */
export declare class ImageGetDocumentInfoFromContentRequest {
    /**
     * File contents.
     */
    file: Buffer;
    /**
     * Document info options 'DocumentInfoOptions' as JSON or XML.
     */
    documentInfoOptions: Buffer;
    /**
     * The document name.
     */
    fileName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(file: Buffer, documentInfoOptions: Buffer, fileName?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetDocumentInfoFromUrl operation.
 */
export declare class ImageGetDocumentInfoFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password.
     */
    password: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, fileName?: string, password?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetDocumentInfoFromUrlWithOptions operation.
 */
export declare class ImageGetDocumentInfoFromUrlWithOptionsRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The rendering options.
     */
    documentInfoOptions: DocumentInfoOptions;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, documentInfoOptions?: DocumentInfoOptions, fileName?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetDocumentInfoWithOptions operation.
 */
export declare class ImageGetDocumentInfoWithOptionsRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The rendering options.
     */
    documentInfoOptions: DocumentInfoOptions;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, documentInfoOptions?: DocumentInfoOptions, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetPage operation.
 */
export declare class ImageGetPageRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The page number.
     */
    pageNumber: number;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality in JPG format. Valid values are between 1 and 100. Default value is 90.
     */
    quality: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, pageNumber: number, format?: string, width?: number, height?: number, quality?: number, password?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetPages operation.
 */
export declare class ImageGetPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality for jpg format. Default value is 90.
     */
    quality: number;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, format?: string, width?: number, height?: number, quality?: number, startPageNumber?: number, countPages?: number, password?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetPagesFromUrl operation.
 */
export declare class ImageGetPagesFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality for jpg format. Default value is 90.
     */
    quality: number;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, fileName?: string, format?: string, width?: number, height?: number, quality?: number, startPageNumber?: number, countPages?: number, password?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetPdfFile operation.
 */
export declare class ImageGetPdfFileRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password. Not required if PDF document was created before.
     */
    password: string;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetPdfFileFromUrl operation.
 */
export declare class ImageGetPdfFileFromUrlRequest {
    /**
     * The URL to retrieve document.
     */
    url: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The document password. Not required if PDF document was created before.
     */
    password: string;
    /**
     * Allows to render document comments. Not required if PDF document was created before.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(url: string, fileName?: string, password?: string, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetZipWithAttachmentPages operation.
 */
export declare class ImageGetZipWithAttachmentPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The attachment name.
     */
    attachmentName: string;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality for jpg format. Default value is 90.
     */
    quality: number;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The document password.
     */
    password: string;
    /**
     * The attachment password.
     */
    attachmentPassword: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, attachmentName: string, format?: string, width?: number, height?: number, quality?: number, startPageNumber?: number, countPages?: number, renderComments?: boolean, renderHiddenPages?: boolean, password?: string, attachmentPassword?: string, extractText?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageGetZipWithPages operation.
 */
export declare class ImageGetZipWithPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The image format (jpg, png or bmp). Default value is png.
     */
    format: string;
    /**
     * The image width.
     */
    width: number;
    /**
     * The image height.
     */
    height: number;
    /**
     * The image quality for jpg format. Default value is 90.
     */
    quality: number;
    /**
     * The starting document page number to render.
     */
    startPageNumber: number;
    /**
     * The count of document pages to render.
     */
    countPages: number;
    /**
     * The document password.
     */
    password: string;
    /**
     * When this options is set to true text contained in document will be extracted and returned along with other information.
     */
    extractText: boolean;
    /**
     * Allows to render document comments.
     */
    renderComments: boolean;
    /**
     * Enables rendering of document hidden pages, sheets or slides.
     */
    renderHiddenPages: boolean;
    /**
     * The name of the default font.
     */
    defaultFontName: string;
    /**
     * The folder with custom fonts in storage.
     */
    fontsFolder: string;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, format?: string, width?: number, height?: number, quality?: number, startPageNumber?: number, countPages?: number, password?: string, extractText?: boolean, renderComments?: boolean, renderHiddenPages?: boolean, defaultFontName?: string, fontsFolder?: string, folder?: string, storage?: string);
}
/**
 * Request model for ImageTransformPages operation.
 */
export declare class ImageTransformPagesRequest {
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The transformation options.
     */
    transformOptions: TransformOptionsBase;
    /**
     * The folder which contains specified file in storage.
     */
    folder: string;
    /**
     * The file storage which have to be used.
     */
    storage: string;
    constructor(fileName: string, transformOptions?: TransformOptionsBase, folder?: string, storage?: string);
}
